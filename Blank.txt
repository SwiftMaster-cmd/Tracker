import SwiftUI 

struct BlackTextFieldStyle: TextFieldStyle {
    func _body(configuration: TextField<Self._Label>) -> some View {
        configuration
            .padding()
            .background(Color.black.opacity(0.6)) // Set background color to black
            .foregroundColor(.white) // Set text color to white
            .cornerRadius(12)
    }
}
struct AddSalesView: View {
    @ObservedObject var salesData: SalesData
    @State private var accountNumber = ""
    @State private var notes = ""
    @State private var selectedCategories: [String] = []
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background Image
                Image("Background")
                    .resizable()
                    .scaledToFill()
                    .edgesIgnoringSafeArea(.all)
                    .opacity(1)
                
                GeometryReader { geometry in
                    ScrollView {
                        VStack {
                            VStack {
                                Text("Select Sale:")
                                    .foregroundColor(.white) // Set text color to white
                                ForEach(["Billable HRA", "Flex HRA", "Transfer/Schedule", "Select RX & MMP"], id: \.self) { category in
                                    Button(action: {
                                        if selectedCategories.contains(category) {
                                            selectedCategories.removeAll { $0 == category }
                                        } else {
                                            selectedCategories.append(category)
                                        }
                                    }) {
                                        HStack {
                                            Text(category)
                                                .foregroundColor(.white) // Set text color to white
                                            Spacer()
                                            Image(systemName: selectedCategories.contains(category) ? "checkmark.square.fill" : "square")
                                        }
                                        .padding()
                                        .background(
                                            RoundedRectangle(cornerRadius: 12)
                                                .fill(Color.black.opacity(0.5)) // Set background color to black
                                        )
                                    }
                                }
                            }
                            .frame(maxWidth: 300)
                            .padding(.horizontal, 20)
                            
                            VStack {
                                TextField("Account Number", text: $accountNumber)
                                    .textFieldStyle(BlackTextFieldStyle()) // Apply custom style
                                    .keyboardType(.numberPad)
                                
                                TextField("Notes", text: $notes)
                                    .textFieldStyle(BlackTextFieldStyle()) // Apply custom style
                                    .keyboardType(.default)
                            }
                            .frame(maxWidth: 300)
                            .padding(.horizontal, 20)
                            
                            Button(action: {
                                if accountNumber.isEmpty {
                                    showAlert(message: "Account Number is required.")
                                } else if salesData.sales.contains(where: { $0.accountNumber == accountNumber }) {
                                    showAlert(message: "Account Number already exists. Please enter a different one.")
                                } else {
                                    let sale = SalesData.Sale(categories: selectedCategories, accountNumber: accountNumber, notes: notes, timestamp: Date())
                                    salesData.sales.append(sale)
                                    
                                    // Clear input fields after adding a sale
                                    accountNumber = ""
                                    notes = ""
                                    selectedCategories = []
                                    
                                    // Save the updated data to app storage (UserDefaults)
                                    salesData.saveData()
                                }
                            }) {
                                Text("Add Sale")
                                    .padding()
                                    .background(
                                        RoundedRectangle(cornerRadius: 12)
                                            .fill(Color.blue)
                                    )
                                    .foregroundColor(.white) // Set text color to white
                            }
                            .padding()
                        }
                        .listStyle(GroupedListStyle())
                        .frame(width: 350, height: 600)
                        .background(
                            RoundedRectangle(cornerRadius: 16)
                                .fill(Color.white.opacity(0.1)) // Set background color to black
                        )
                        .foregroundColor(.white) // Set text color to white
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .center)
                }
            }
            .navigationBarTitle("Add Sales", displayMode: .inline)
            .preferredColorScheme(.dark)
            .alert(isPresented: $showAlert) {
                Alert(title: Text("Validation Error"), message: Text(alertMessage), dismissButton: .default(Text("OK")))
            }
        }
        .onTapGesture {
            UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
        }
        .preferredColorScheme(.dark) // Set the preferred color scheme to dark mode for the entire view
    }
    
    private func showAlert(message: String) {
        alertMessage = message
        showAlert = true
    }
}


// CommissionData.swift

import SwiftUI


struct CommissionData {
    static let commissionStructures: [CommissionStructure] = [
        CommissionStructure(category: "Billable HRA", rates: [(0, 14, 2.5), (15, 39, 3.0), (40, 59, 3.5), (60, Int.max, 4.0)]),
        CommissionStructure(category: "Transfer/Schedule", rates: [(0, 9, 7.0), (10, 24, 8.0), (25, 32, 9.0), (33, Int.max, 10.0)]),
        CommissionStructure(category: "Select RX & MMP", rates: [(0, 9, 15.0), (10, 24, 16.0), (25, 89, 17.0), (90, 129, 18.0), (130, Int.max, 19.0)])
    ]
}
// CommissionStructure.swift

import SwiftUI
// CommissionStructure.swift


struct CommissionStructure {
    let category: String
    let rates: [(lowerBound: Int, upperBound: Int, rate: Double)]
}
import SwiftUI

struct CommissionView: View {
    @ObservedObject var salesData: SalesData
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background Image
                Image("Background")
                    .resizable()
                    .scaledToFill()
                    .edgesIgnoringSafeArea(.all)
                    .opacity(0.6)
                
                if salesData.sales.isEmpty {
                    // Show a message when there are no sales data
                    VStack {
                        Text("No Sales Data Available")
                            .font(.headline)
                            .foregroundColor(.white)
                        
                        Text("Please Add A Sale In 'Add Sales' Tab")
                            .font(.footnote)
                            .foregroundColor(.gray)
                    }
                } else {
                    GeometryReader { geometry in
                        ScrollView {
                            VStack(spacing: 16) {
                                ForEach(salesData.categories, id: \.self) { category in
                                    Section(header:
                                                Text(category)
                                        .font(.title3)
                                        .foregroundColor(.white)
                                            
                                    ) {
                                        let totalSalesCount = totalSales(for: category)
                                        let totalCommission = calculateTotalCommission(for: category, salesCount: totalSalesCount)
                                        ZStack {
                                            RoundedRectangle(cornerRadius: 50)
                                                .fill(Color.white.opacity(0.1))
                                                .frame(width: 350, height: 75)
                                            
                                            HStack {
                                                Spacer()
                                                HStack(alignment: .center, spacing: 5) {
                                                    Text("Points:")
                                                        .font(.headline)
                                                    Text("\(totalSalesCount) : ")
                                                    HStack {
                                                        Text("Compensation")
                                                            .font(.headline)
                                                        Text("$\(totalCommission, specifier: "%.2f")")
                                                    }
                                                }
                                                Spacer()
                                            }
                                        }
                                    }
                                }
                                
                                // Calculate and display the total compensation
                                let totalCompensation = calculateTotalCompensation()
                                ZStack {
                                    Spacer()
                                    VStack(alignment: .center, spacing: 5) {
                                        Text("Total Compensation")
                                            .font(.headline)
                                        Text("$\(totalCompensation, specifier: "%.2f")")
                                    }
                                    Spacer()
                                }
                                .padding(20)
                                .background(Color.white.opacity(0.1))
                                .cornerRadius(40)
                                .padding([.leading, .trailing], 50)
                            }
                            .listStyle(GroupedListStyle())
                            .frame(minHeight: geometry.size.height * 0.2)
                        }
                        .background(Color.clear)
                        .cornerRadius(16)
                    }
                }
            }
            .navigationBarTitle("Commissions", displayMode: .inline)
            .preferredColorScheme(.dark) // Set the preferred color scheme to dark mode
        }
         }
    
    private func totalSales(for category: String) -> Int {
        return salesData.sales.filter { $0.categories.contains(category) }.count
    }
    
    private func calculateTotalCommission(for category: String, salesCount: Int) -> Double {
        if let commissionStructure = CommissionData.commissionStructures.first(where: { $0.category == category }) {
            for (lowerBound, upperBound, rate) in commissionStructure.rates {
                if salesCount >= lowerBound && salesCount <= upperBound {
                    return Double(salesCount) * rate
                }
            }
        }
        return 0.0
    }
    
    private func calculateTotalCompensation() -> Double {
        // Calculate the total compensation by summing up commissions for all categories
        var totalCompensation = 0.0
        for category in salesData.categories {
            let totalSalesCount = totalSales(for: category)
            let totalCommission = calculateTotalCommission(for: category, salesCount: totalSalesCount)
            totalCompensation += totalCommission
        }
        return totalCompensation
    }
}
import SwiftUI

struct ContentView: View {
    @ObservedObject var salesData: SalesData // Make sure you have an instance of SalesData to pass
    
    var body: some View {
        NavigationView {
            ZStack {
                Image("Background")
                    .resizable()
                    .scaledToFill()
                    .edgesIgnoringSafeArea(.all)
                    .frame(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)
                
                VStack {
                    VStack {
                        Text("Population Health")
                            .font(.largeTitle)
                            .bold()
                            .foregroundColor(Color.white)
                        
                        Text("Sales Tracker")
                            .font(.title)
                            .foregroundColor(Color.white)
                    }
                    .padding()
                    
                    NavigationLink(destination: AddSalesView(salesData: salesData)) {
                        Image("V3-1")
                            .renderingMode(.original)
                            .resizable()
                            .scaledToFit()
                            .frame(width: 200, height: 100)
                            .clipShape(Capsule())
                    }
                    .padding()
                    
                    NavigationLink(destination: ViewSalesView(salesData: salesData)) {
                        Image("V3")
                            .renderingMode(.original)
                            .resizable()
                            .scaledToFit()
                            .frame(width: 200, height: 100)
                            .clipShape(Capsule())
                    }
                    .padding()
                    
                    NavigationLink(destination: CommissionView(salesData: salesData)) {
                        Image("V3-2")
                            .renderingMode(.original)
                            .resizable()
                            .scaledToFit()
                            .frame(width: 200, height: 100)
                            .clipShape(Capsule())
                    }
                    .padding(.top)
                    
                    Text("")
                        .font(.footnote)
                        .foregroundColor(.white)
                        .padding()
                        .frame(maxWidth: .infinity)
                    
                    Text("Designed and Developed by Micah Simmons")
                        .font(.footnote)
                        .foregroundColor(.white)
                    
                    Text("Employee of Population Health - CSA")
                        .font(.footnote)
                        .foregroundColor(.white)
                }
            }
            .onAppear {
                // Load data here when the view appears
                salesData.loadData()
            }
        }
    }
}
import SwiftUI

@main
struct MyApp: App {
    @AppStorage("salesData") var savedSalesData: Data = Data()

    // Create an instance of SalesData
    let salesData = SalesData()
    
    var body: some Scene {
        WindowGroup {
            // Pass the salesData instance to your ViewSalesView
            ContentView(salesData: salesData)
        }
    }
}
import SwiftUI
struct SaleDetailView: View {
    var sale: SalesData.Sale
    
    var body: some View {
        VStack {
            VStack(alignment: .leading, spacing: 10) {
                Text("Account Number")
                    .font(.title)
                    .foregroundColor(.white)
                
                RoundedRectangle(cornerRadius: 10) // Add a rounded rectangle for the results
                    .fill(Color.white.opacity(0.1))
                    .frame(width: 200, height: 50) // Set width to 350 and height as needed
                    .overlay(
                        Text(sale.accountNumber) // Display the account number
                            .font(.title3)
                            .foregroundColor(.white)
                            .fontWeight(.bold) // Make the text bold
                    )
                Text("Notes:")
                    .font(.title)
                    .foregroundColor(.white)
              
                RoundedRectangle(cornerRadius: 10)
                    .fill(Color.white.opacity(0.1))
                    .frame(width: 200, height: 50) // Set width to 350 and height as needed
                  //  .padding(10) // Add 10 points of padding on all sides
                    .overlay(
                        ScrollView {
                            Text(sale.notes) // Display the notes
                                .font(.subheadline)
                                .foregroundColor(.white)
                                .fontWeight(.bold) // Make the text bold
                                .frame(maxWidth: .infinity, alignment: .center)
                        }
                          //  .showsIndicators(false)
                    )
                Text("Sales Categories")
                    .font(.title)
                    .foregroundColor(.white)
                
                ForEach(sale.categories, id: \.self) { category in
                    RoundedRectangle(cornerRadius: 10) // Add a rounded rectangle for each category
                        .fill(Color.white.opacity(0.1))
                        .frame(width: 200, height: 50) // Set width to 350 and height as needed
                        .overlay(
                            Text(category)
                                .font(.subheadline)
                                .foregroundColor(.white)
                                .fontWeight(.bold) // Make the text bold
                        )
                }
                
                Text("Date")
                    .font(.title)
                    .foregroundColor(.white)
                
                RoundedRectangle(cornerRadius: 10) // Add a rounded rectangle for the date
                    .fill(Color.white.opacity(0.1))
                    .frame(width: 200, height: 50) // Set width to 350 and height as needed
                    .overlay(
                        Text(formatDate(sale.timestamp)) // Display the formatted date
                            .font(.subheadline)
                            .foregroundColor(.white)
                            .fontWeight(.bold) // Make the text bold
                    )
            }
            .padding(20)
            .foregroundColor(.white)
            .preferredColorScheme(.dark)
        }
        .padding()
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}
import SwiftUI

class SalesData: ObservableObject {
    struct Sale: Identifiable, Codable {
        var id = UUID()
        var categories: [String]
        var accountNumber: String
        var notes: String
        var timestamp: Date
    }
    
    @Published var sales: [Sale] = []
    
    // Function to save data to UserDefaults
    func saveData() {
        if let encodedData = try? JSONEncoder().encode(sales) {
            UserDefaults.standard.set(encodedData, forKey: "salesData")
        }
    }
    
    // Function to load data from UserDefaults
    func loadData() {
        if let encodedData = UserDefaults.standard.data(forKey: "salesData"),
           let decodedData = try? JSONDecoder().decode([Sale].self, from: encodedData) {
            self.sales = decodedData
        }
    }
    
    var categories: [String] {
        // Extract unique categories from sales data
        return Array(Set(sales.flatMap { $0.categories }))
    }
    
    // Add a new sale to the sales array
    func addSale(newSale: Sale) {
        sales.append(newSale)
        saveData()
    }
    
    // Remove a sale from the sales array
    func removeSale(at index: Int) {
        sales.remove(at: index)
        saveData()
    }
}
import SwiftUI 

struct ViewSalesView: View {
    @ObservedObject var salesData: SalesData
    @State private var selectedAccount: String?
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background Image
                Image("Background")
                    .resizable()
                    .scaledToFill()
                    .edgesIgnoringSafeArea(.all)
                    .opacity(1)
                if salesData.sales.isEmpty {
                    // Show a message when there are no sales data
                    VStack {
                        Text("No Sales Data Available")
                            .font(.headline)
                            .foregroundColor(Color.white) // Set text color to black
                        
                        Text("Please Add A Sale In 'Add Sales' Tab")
                            .font(.footnote)
                            .foregroundColor(Color.white) // Set text color to gray
                    }
                } else {
                    GeometryReader { geometry in
                        ScrollView {
                            VStack {
                                ForEach(salesData.sales, id: \.accountNumber) { sale in
                                    if selectedAccount == sale.accountNumber {
                                        VStack {
                                            SaleDetailView(sale: sale)
                                                .background(
                                                    RoundedRectangle(cornerRadius: 25)
                                                        .fill(Color.black.opacity(0.6)) // Set background color to black with 0 opacity
                                                )
                                                .cornerRadius(25)
                                                .padding(.top, 5)
                                                .padding(.horizontal, 20)
                                                .padding(.vertical, 10)
                                            
                                            Button(action: {
                                                
                                                // Delete the sale when the button is tapped
                                                if let index = salesData.sales.firstIndex(where: { $0.accountNumber == sale.accountNumber }) {
                                                    salesData.sales.remove(at: index)
                                                    selectedAccount = nil // Deselect the account after deletion
                                                    
                                                    // Save the updated data to app storage (UserDefaults)
                                                    salesData.saveData()
                                                }
                                            }) 
                                            {
                                                Text("Delete")
                                                    .foregroundColor(.white)
                                                    .padding()
                                                    .background(Color.red)
                                                    .cornerRadius(25)
                                                    .padding(.bottom, 10)
                                            }
                                        }
                                        .onTapGesture {
                                            // Set the selected account to nil when tapped to hide details
                                            selectedAccount = nil
                                        }
                                        .frame(maxWidth: .infinity, alignment: .center)
                                    } else {
                                        Text("Account Number: " + sale.accountNumber)
                                            .onTapGesture {
                                                // Set the selected account when tapped to show details
                                                selectedAccount = sale.accountNumber
                                            }
                                            .padding()
                                            .foregroundColor(.white)
                                            .background(
                                                RoundedRectangle(cornerRadius: 25)
                                                    .fill(Color.black.opacity(0.6)) // Set background color to black with 0.6 opacity
                                            )
                                            .cornerRadius(10)
                                            .padding(.horizontal, 20)
                                            .padding(.vertical)
                                            .frame(maxWidth: .infinity, alignment: .center)
                                    }
                                }
                            }
                            .frame(maxWidth: 350)
                            .background(
                                RoundedRectangle(cornerRadius: 50)
                                    .fill(Color.white.opacity(0.1)) // Set background color to black with 0.6 opacity
                            )
                            .cornerRadius(50)
                            .padding()
                        }
                        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .center)
                    }
                }
            }
            .navigationBarTitle("View Sales", displayMode: .inline)
            .preferredColorScheme(.dark)
        }
    }
}
